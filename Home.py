"""
Dashboard de Scoring Cr√©dit pour Charg√©s de Relation Client
Facilite l'explication des d√©cisions de cr√©dit aux clients et leur r√©vision si n√©cessaire
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import os
import datetime
from utils.api_client import get_client_prediction, get_available_clients, get_client_details

# Import de la configuration
from config import (
    COLORBLIND_FRIENDLY_PALETTE, UI_CONFIG, 
    CSV_PATHS, DEFAULT_THRESHOLD
)

# Configuration de la page
st.set_page_config(
    page_title="Outil d'Analyse pour Charg√©s de Relation Client",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Barre de navigation principale
tabs = ["Accueil", "Profil Client", "Comparaison", "Simulation"]
selected_tab = st.tabs(tabs)

with selected_tab[0]:  # Accueil
    # Titre et description adapt√©s aux charg√©s de relation client
    st.title("Outil d'Analyse des D√©cisions de Cr√©dit")
    
    st.markdown("""
    <div role="contentinfo" aria-label="Description de l'application">
    <p>Bienvenue dans votre outil d'analyse de d√©cisions de cr√©dit. Cette interface vous permet de:</p>
    <ul>
        <li><strong>Consulter</strong> rapidement les d√©cisions d'octroi de cr√©dit</li>
        <li><strong>Expliquer</strong> clairement aux clients les facteurs d√©terminants</li>
        <li><strong>Comparer</strong> le profil d'un client √† des profils similaires</li>
        <li><strong>Simuler</strong> l'impact de modifications sur la d√©cision finale</li>
    </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # Section de recherche client - prominente pour les charg√©s de relation
    st.header("Rechercher un dossier client")
    
    # Conteneur principal de recherche avec bordure
    with st.container(border=True):
        col_search_1, col_search_2 = st.columns([3, 1])
        
        with col_search_1:
            # R√©cup√©ration des clients
            all_clients = get_available_clients(limit=UI_CONFIG["default_limit"])
            
            if all_clients:
                # Menu d√©roulant avec recherche
                selected_client_id = st.selectbox(
                    "Entrez l'identifiant du client:",
                    options=all_clients,
                    format_func=lambda x: f"Client #{x}",
                    help="Cliquez pour voir la liste ou commencez √† taper pour filtrer",
                    key="main_client_search"
                )
            else:
                st.error("Aucun client disponible. V√©rifiez la connexion √† la base de donn√©es.")
                selected_client_id = None
        
        with col_search_2:
            # Bouton d'action principal pour les charg√©s de relation
            if selected_client_id and st.button("Consulter ce dossier", key="btn_analyze_main", type="primary", use_container_width=True):
                st.session_state.client_id = selected_client_id
                st.rerun()
    
    # Affichage des derniers clients consult√©s - utile pour les charg√©s qui travaillent avec plusieurs clients
    st.subheader("Dossiers r√©cemment consult√©s")
    
    # Initialiser l'historique s'il n'existe pas
    if "recent_clients" not in st.session_state:
        st.session_state.recent_clients = []
    
    # Mettre √† jour l'historique si un client est consult√©
    if "client_id" in st.session_state:
        client_id = st.session_state.client_id
        if client_id in st.session_state.recent_clients:
            st.session_state.recent_clients.remove(client_id)
        st.session_state.recent_clients.insert(0, client_id)
        st.session_state.recent_clients = st.session_state.recent_clients[:5]
    
    # Afficher les clients r√©cents
    if st.session_state.recent_clients:
        recent_cols = st.columns(5)
        for i, recent_id in enumerate(st.session_state.recent_clients):
            with recent_cols[i]:
                if st.button(f"Dossier #{recent_id}", key=f"recent_{recent_id}", use_container_width=True):
                    st.session_state.client_id = recent_id
                    st.rerun()
    else:
        st.info("Aucun dossier client consult√© r√©cemment")

# Fonctions d'affichage
def display_client_overview(client_id):
    """Affiche un aper√ßu des informations client adapt√© aux besoins des charg√©s de relation"""
    
    with st.spinner(f"Chargement du dossier client {client_id}..."):
        prediction = get_client_prediction(client_id)
        details = get_client_details(client_id)
    
    if not prediction or not details:
        st.error(f"Impossible de r√©cup√©rer le dossier client {client_id}.")
        if st.button("Retour √† l'accueil"):
            if "client_id" in st.session_state:
                del st.session_state.client_id
            st.rerun()
        return
    
    # En-t√™te avec ID et statut - informations essentielles pour le charg√©
    col_header_1, col_header_2 = st.columns([3, 1])
    
    with col_header_1:
        st.header(f"Dossier client #{client_id}")
        
    with col_header_2:
        decision = prediction.get('decision', 'INCONNU')
        icon = "‚úÖ" if decision == "ACCEPT√â" else "‚ùå"
        color = COLORBLIND_FRIENDLY_PALETTE['accepted'] if decision == "ACCEPT√â" else COLORBLIND_FRIENDLY_PALETTE['refused']
        st.markdown(f"""
        <h3 style='color: {color}; text-align: right;'>
            {icon} {decision}
        </h3>
        <div role="status" aria-live="polite" class="visually-hidden">
            D√©cision pour ce dossier: {decision}
        </div>
        """, unsafe_allow_html=True)
    
    # Notes du charg√© de relation (nouvelle fonctionnalit√©)
    if "client_notes" not in st.session_state:
        st.session_state.client_notes = {}
    
    with st.expander("üìù Notes sur ce dossier client", expanded=False):
        current_note = st.session_state.client_notes.get(client_id, "")
        note = st.text_area(
            "Notes de suivi (visibles uniquement par les charg√©s de relation):",
            value=current_note,
            height=100,
            help="Documentez ici vos √©changes avec le client ou vos observations"
        )
        if note != current_note:
            st.session_state.client_notes[client_id] = note
            st.success("Note enregistr√©e")
    
    # Informations principales - organis√©es pour faciliter l'explication au client
    col1, col2 = st.columns([1, 1])
    
    with col1:
        # Informations personnelles - ce que le charg√© peut discuter avec le client
        with st.container(border=True):
            st.subheader("Profil du demandeur")
            
            col_info1, col_info2 = st.columns(2)
            
            with col_info1:
                st.markdown(f"**Genre:** {details['personal_info'].get('gender', '')}")
                st.markdown(f"**√Çge:** {details['personal_info'].get('age', '')} ans")
                st.markdown(f"**√âducation:** {details['personal_info'].get('education', '')}")
                st.markdown(f"**Statut familial:** {details['personal_info'].get('family_status', '')}")
            
            with col_info2:
                st.markdown(f"**Revenu annuel:** {details['personal_info'].get('income', 0):,.0f} {UI_CONFIG['currency_symbol']}")
                st.markdown(f"**Anciennet√© d'emploi:** {details['personal_info'].get('employment_years', 0)} ans")
                
        # Informations cr√©dit - d√©tails que le charg√© peut expliquer
        with st.container(border=True):
            st.subheader("D√©tails de la demande de cr√©dit")
            
            col_credit1, col_credit2 = st.columns(2)
            
            with col_credit1:
                st.markdown(f"**Montant demand√©:** {details['credit_info'].get('amount', 0):,.0f} {UI_CONFIG['currency_symbol']}")
                st.markdown(f"**Dur√©e du cr√©dit:** {details['credit_info'].get('credit_term', 0)} mois")
            
            with col_credit2:
                st.markdown(f"**Mensualit√©:** {details['credit_info'].get('annuity', 0):,.0f} {UI_CONFIG['currency_symbol']}/mois")
                st.markdown(f"**Valeur du bien:** {details['credit_info'].get('goods_price', 0):,.0f} {UI_CONFIG['currency_symbol']}")
    
    with col2:
        # √âvaluation avec explication pour le charg√© de relation client
        with st.container(border=True):
            st.subheader("Analyse du risque √† expliquer au client")
            
            probability = prediction.get('probability', 0)
            threshold = prediction.get('threshold', DEFAULT_THRESHOLD)
            
            # CORRECTION: Jauge claire pour faciliter l'explication au client
            # Valeurs en pourcentage pour plus de clart√©
            fig = go.Figure(go.Indicator(
                mode="gauge+number",
                value=probability * 100,  # Convertir en pourcentage pour l'affichage
                domain={'x': [0, 1], 'y': [0, 1]},
                title={'text': "Probabilit√© de d√©faut", 'font': {'size': 18}},
                number={'suffix': "%", 'valueformat': ".1f", 'font': {'size': 20}},
                gauge={
                    'axis': {'range': [0, 100], 'ticksuffix': "%", 'tickformat': ".0f"},  # √âchelle de 0 √† 100%
                    'bar': {'color': COLORBLIND_FRIENDLY_PALETTE['primary']},
                    'bgcolor': "white",
                    'steps': [
                        {'range': [0, threshold * 100], 'color': COLORBLIND_FRIENDLY_PALETTE['positive']},
                        {'range': [threshold * 100, 100], 'color': COLORBLIND_FRIENDLY_PALETTE['negative']}
                    ],
                    'threshold': {
                        'line': {'color': COLORBLIND_FRIENDLY_PALETTE['threshold'], 'width': 2},
                        'thickness': 0.75,
                        'value': threshold * 100  # Seuil en pourcentage
                    }
                }
            ))
            
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=30, b=20))
            
            gauge_description = f"""
            Jauge montrant la probabilit√© de d√©faut du client: {probability:.1%}.
            Le seuil critique est √† {threshold:.1%}.
            Le client est {'en dessous' if probability < threshold else 'au-dessus'} du seuil de {abs(probability - threshold):.1%}.
            """
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Aide √† l'explication pour le charg√© de relation
            st.markdown(f"""
            <div aria-hidden="true">
                <p><strong>Points cl√©s √† expliquer au client:</strong></p>
                <ul>
                    <li>Le score de risque est de <strong>{probability:.1%}</strong></li>
                    <li>Notre seuil d'acceptation est fix√© √† <strong>{threshold:.1%}</strong></li>
                    <li>Le dossier est {'favorable' if probability < threshold else 'd√©favorable'} avec un √©cart de <strong>{abs(probability - threshold):.1%}</strong></li>
                </ul>
            </div>
            <div class="visually-hidden">{gauge_description}</div>
            """, unsafe_allow_html=True)
    
    # Section de contestation/r√©vision - fonctionnalit√© sp√©cifique pour les charg√©s
    if decision == "REFUS√â":
        with st.container(border=True):
            st.subheader("Options de r√©vision du dossier")
            
            col_rev1, col_rev2 = st.columns([3, 1])
            
            with col_rev1:
                revision_reason = st.selectbox(
                    "Motif de la demande de r√©vision:",
                    options=["", "Informations compl√©mentaires fournies", "Erreur dans les donn√©es saisies", 
                             "Garant ou co-emprunteur ajout√©", "Modification du montant/dur√©e", "Autre"]
                )
                if revision_reason == "Autre":
                    revision_reason = st.text_input("Pr√©cisez le motif:")
            
            with col_rev2:
                if revision_reason:
                    if st.button("Demander une r√©vision", key="btn_revise", use_container_width=True):
                        # Simuler la demande de r√©vision (√† impl√©menter r√©ellement)
                        st.success("Demande de r√©vision enregistr√©e! Un analyste de cr√©dit examinera ce dossier.")
    
    # Navigation vers les pages d√©taill√©es - adapt√©e aux t√¢ches du charg√©
    st.subheader("Outils d'analyse pour le charg√© de relation")
    col_nav1, col_nav2, col_nav3 = st.columns(3)
    
    with col_nav1:
        if st.button("üìã Profil d√©taill√© et facteurs d√©cisifs", key="btn_profile", use_container_width=True):
            st.switch_page("pages/1_Profil_Client.py")
            
    with col_nav2:
        if st.button("üìä Comparaison avec clients similaires", key="btn_compare", use_container_width=True):
            st.switch_page("pages/2_Comparaison.py")
            
    with col_nav3:
        if st.button("üîÑ Simulation de modifications", key="btn_simulate", use_container_width=True):
            st.switch_page("pages/3_Simulation.py")

def display_global_stats():
    """Affiche des statistiques globales utiles pour les charg√©s de relation client"""
    
    st.header("Vue d'ensemble du portefeuille de demandes")
    
    # M√©triques cl√©s utiles pour les charg√©s
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(label="Taux d'approbation actuel", value="73%", delta="2%")
    
    with col2:
        st.metric(label="Montant moyen accord√©", value=f"630 000 {UI_CONFIG['currency_symbol']}", delta=f"-15 000 {UI_CONFIG['currency_symbol']}")
    
    with col3:
        st.metric(label="Dur√©e moyenne de traitement", value="2.5 jours", delta="-0.3 jour")
    
    with col4:
        st.metric(label="Taux de r√©vision accept√©e", value="12%", delta="1.5%")
    
    # Graphiques utiles pour le contexte du charg√©
    col_chart1, col_chart2 = st.columns(2)
    
    with col_chart1:
        st.subheader("Distribution des montants accord√©s")
        
        try:
            df = None
            for path in CSV_PATHS:
                try:
                    if os.path.exists(path):
                        df = pd.read_csv(path)
                        break
                except:
                    continue
                
            if df is not None:
                fig = px.histogram(
                    df, 
                    x="AMT_CREDIT",
                    nbins=30, 
                    labels={"AMT_CREDIT": f"Montant du cr√©dit ({UI_CONFIG['currency_symbol']})", "count": "Nombre de dossiers"},
                    color_discrete_sequence=[COLORBLIND_FRIENDLY_PALETTE["primary"]],
                    height=UI_CONFIG["chart_height"]
                )
                fig.update_layout(margin=dict(l=0, r=0, t=10, b=0))
                
                hist_desc = """
                Histogramme montrant la distribution des montants de cr√©dit accord√©s.
                La plupart des cr√©dits se situent entre 300 000 et 700 000 roubles.
                """
                
                st.plotly_chart(fig, use_container_width=True)
                st.markdown(f"""<div class="visually-hidden">{hist_desc}</div>""", unsafe_allow_html=True)
            else:
                st.error("Impossible de charger les donn√©es pour l'histogramme.")
        except Exception as e:
            st.error(f"Erreur lors du chargement des donn√©es: {str(e)}")
    
    with col_chart2:
        st.subheader("R√©partition des d√©cisions de cr√©dit")
        
        decisions = pd.DataFrame({
            "D√©cision": ["Accept√©", "Refus√©"],
            "Pourcentage": [73, 27]
        })
        
        fig = px.pie(
            decisions,
            names="D√©cision",
            values="Pourcentage",
            color="D√©cision",
            color_discrete_map={
                "Accept√©": COLORBLIND_FRIENDLY_PALETTE["accepted"], 
                "Refus√©": COLORBLIND_FRIENDLY_PALETTE["refused"]
            },
            height=UI_CONFIG["chart_height"]
        )
        
        fig.update_traces(
            textinfo='percent+label',
            textposition='inside',
            marker=dict(line=dict(color='#FFFFFF', width=2))
        )
        
        fig.update_layout(margin=dict(l=0, r=0, t=10, b=0))
        
        pie_desc = """
        Diagramme circulaire montrant la r√©partition des d√©cisions de cr√©dit.
        73% des demandes sont accept√©es et 27% sont refus√©es.
        """
        
        st.plotly_chart(fig, use_container_width=True)
        st.markdown(f"""<div class="visually-hidden">{pie_desc}</div>""", unsafe_allow_html=True)
    
    # Ressources pour les charg√©s de relation client
    st.subheader("Ressources pour les charg√©s de relation client")
    
    with st.container(border=True):
        col_res1, col_res2 = st.columns(2)
        
        with col_res1:
            st.markdown("""
            ### Comment utiliser ce dashboard
            - Recherchez un client par son identifiant
            - Consultez la d√©cision et les facteurs d√©terminants
            - Utilisez la page "Simulation" pour tester des modifications
            - Documentez vos √©changes dans la section "Notes"
            - Si n√©cessaire, demandez une r√©vision de dossier
            """)
            
        with col_res2:
            st.markdown("""
            ### Comment expliquer une d√©cision
            1. Pr√©sentez la jauge de risque et le seuil
            2. Expliquez les 3-5 facteurs les plus importants
            3. Proposez des pistes d'am√©lioration si refus√©
            4. Documentez toutes les questions et r√©ponses
            5. Orientez vers les alternatives si n√©cessaire
            """)

# Logique principale d'affichage
if "client_id" in st.session_state:
    display_client_overview(st.session_state.client_id)
else:
    display_global_stats()

# Ajout d'informations de pied de page
st.markdown(f"""
<hr>
<div style="text-align: center; color: #666;">
    <small>
        Outil d'analyse pour charg√©s de relation client | 2025-10-10 08:47:37 | 
        <span aria-label="Symbole mon√©taire utilis√©: Rouble russe">Montants en roubles (‚ÇΩ)</span> | 
        Contact support: poste 4242
    </small>
</div>
""", unsafe_allow_html=True)

# CSS pour l'accessibilit√©
st.markdown("""
<style>
    .visually-hidden {
        position: absolute !important;
        width: 1px !important;
        height: 1px !important;
        padding: 0 !important;
        margin: -1px !important;
        overflow: hidden !important;
        clip: rect(0, 0, 0, 0) !important;
        white-space: nowrap !important;
        border: 0 !important;
    }
</style>
""", unsafe_allow_html=True)