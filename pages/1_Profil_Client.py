"""
Page de profil d√©taill√© client
Permet d'analyser en profondeur les facteurs influen√ßant la d√©cision de cr√©dit
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from utils.api_client import get_client_prediction, get_client_details, get_feature_importance

# Import de la configuration
from config import (
    COLORBLIND_FRIENDLY_PALETTE, UI_CONFIG, 
    FEATURE_DESCRIPTIONS, DEFAULT_THRESHOLD
)

# Configuration de la page
st.set_page_config(
    page_title="Profil Client D√©taill√© - Dashboard de Scoring Cr√©dit",  # Titre plus descriptif
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Styles CSS pour l'accessibilit√©
st.markdown("""
<style>
    /* Styles pour l'accessibilit√© */
    .high-contrast-text {
        color: #000000 !important;
        background-color: #ffffff;
        padding: 0.5rem;
        border-radius: 0.2rem;
        border: 1px solid #cccccc;
    }
    
    /* Classe pour les textes destin√©s aux lecteurs d'√©cran */
    .visually-hidden {
        position: absolute !important;
        width: 1px !important;
        height: 1px !important;
        padding: 0 !important;
        margin: -1px !important;
        overflow: hidden !important;
        clip: rect(0, 0, 0, 0) !important;
        white-space: nowrap !important;
        border: 0 !important;
    }
    
    /* Contraste am√©lior√© pour les tableaux */
    .dataframe th {
        background-color: #f0f0f0 !important;
        color: #000000 !important;
        font-weight: bold !important;
    }
    
    .dataframe td {
        background-color: #ffffff !important;
        color: #000000 !important;
    }
    
    /* Am√©lioration du contraste pour les √©l√©ments interactifs */
    button, .stButton>button {
        color: #000000 !important;
        background-color: #f8f8f8 !important;
        border: 2px solid #666666 !important;
        font-weight: 500 !important;
    }
    
    button:hover, .stButton>button:hover {
        background-color: #e0e0e0 !important;
    }
    
    /* Am√©lioration du focus pour la navigation clavier */
    a:focus, button:focus, select:focus, textarea:focus, input:focus {
        outline: 3px solid #4b9fff !important;
        outline-offset: 2px !important;
    }
    
    /* Style pour les liens */
    a {
        color: #0066cc !important;
        text-decoration: underline !important;
    }

    /* Adaptation des polices et tailles pour faciliter le redimensionnement */
    body, .stMarkdown, .stText {
        font-size: 1rem !important;
        line-height: 1.6 !important;
    }
    
    h1, h2, h3, h4, h5, h6 {
        line-height: 1.3 !important;
    }
    
    .nav-button {
        display: inline-block;
        padding: 0.5rem 1rem !important;
        margin-right: 0.75rem !important;
        border-radius: 0.25rem !important;
        text-decoration: none !important;
        font-weight: 500 !important;
        background-color: #f0f0f0 !important;
        color: #000000 !important;
        border: 1px solid #777777 !important;
    }
    
    .nav-button.active {
        background-color: #3366ff !important;
        color: #ffffff !important;
        font-weight: 700 !important;
    }
    
    /* Couleurs avec contraste renforc√© */
    .alert-success {
        color: #155724 !important;
        background-color: #d4edda !important;
        border: 1px solid #155724 !important;
    }
    
    .alert-warning {
        color: #856404 !important;
        background-color: #fff3cd !important;
        border: 1px solid #856404 !important;
    }
    
    .alert-danger {
        color: #721c24 !important;
        background-color: #f8d7da !important;
        border: 1px solid #721c24 !important;
    }
</style>
""", unsafe_allow_html=True)

# Fonction pour afficher la barre de navigation commune avec attributs ARIA
def display_navigation():
    st.markdown(
        """
        <nav aria-label="Navigation principale" role="navigation">
            <div style="margin-bottom: 1rem;">
                <a href="/" class="nav-button" role="button" aria-label="Accueil">Accueil</a>
                <a href="/Profil_Client" class="nav-button active" role="button" aria-current="page" aria-label="Page actuelle: Profil Client">Profil Client</a>
                <a href="/Comparaison" class="nav-button" role="button" aria-label="Comparaison">Comparaison</a>
                <a href="/Simulation" class="nav-button" role="button" aria-label="Simulation">Simulation</a>
            </div>
        </nav>
        """,
        unsafe_allow_html=True
    )

# Affichage de la barre de navigation
display_navigation()

# V√©rification de l'ID client dans la session
if "client_id" not in st.session_state:
    st.markdown('<div class="alert-warning" style="padding: 1rem; border-radius: 0.5rem;">', unsafe_allow_html=True)
    st.warning("Aucun client s√©lectionn√©. Veuillez retourner √† la page d'accueil pour s√©lectionner un client.")
    if st.button("Retour √† l'accueil", key="btn_back_home"):
        st.switch_page("Home.py")
    st.markdown('</div>', unsafe_allow_html=True)
    st.stop()

# R√©cup√©ration de l'ID client de la session
client_id = st.session_state.client_id

# Titre de la page avec ID client
st.title(f"Profil d√©taill√© du client #{client_id}")
# Description pour les lecteurs d'√©cran
st.markdown(f'<span class="visually-hidden">Cette page pr√©sente les informations d√©taill√©es et l\'analyse de la demande de cr√©dit pour le client num√©ro {client_id}.</span>', unsafe_allow_html=True)

# Chargement des donn√©es client avec barre de progression
with st.spinner("Chargement des donn√©es d√©taill√©es..."):
    progress_bar = st.progress(0)
    st.markdown('<div class="visually-hidden" aria-live="polite">Chargement des donn√©es en cours...</div>', unsafe_allow_html=True)
    
    # Chargement progressif des donn√©es
    progress_bar.progress(33)
    prediction = get_client_prediction(client_id)
    progress_bar.progress(66)
    details = get_client_details(client_id)
    progress_bar.progress(100)
    feature_importance = get_feature_importance(client_id)
    st.markdown('<div class="visually-hidden" aria-live="polite">Chargement des donn√©es termin√©.</div>', unsafe_allow_html=True)
    progress_bar.empty()

if not prediction or not details:
    st.markdown('<div class="alert-danger" style="padding: 1rem; border-radius: 0.5rem;">', unsafe_allow_html=True)
    st.error("Impossible de r√©cup√©rer les informations du client.")
    if st.button("Retour √† l'accueil", key="btn_back_error"):
        st.switch_page("Home.py")
    st.markdown('</div>', unsafe_allow_html=True)
    st.stop()

# Affichage du statut de la demande (Accept√©e/Refus√©e)
decision = prediction.get('decision', 'INCONNU')
probability = prediction.get('probability', 0)
threshold = prediction.get('threshold', DEFAULT_THRESHOLD)

status_color = COLORBLIND_FRIENDLY_PALETTE['accepted'] if decision == "ACCEPT√â" else COLORBLIND_FRIENDLY_PALETTE['refused']
# Utiliser √† la fois ic√¥ne et texte pour l'accessibilit√©
status_icon = "‚úÖ" if decision == "ACCEPT√â" else "‚ùå"
status_text = "Accept√©" if decision == "ACCEPT√â" else "Refus√©" 

# Banni√®re de statut en haut de la page avec contraste am√©lior√© et texte explicite
st.markdown(
    f"""
    <div style="padding: 0.75rem 1.25rem; border-radius: 0.5rem; background-color: {status_color}22; border: 2px solid {status_color}; margin-bottom: 1.5rem;" role="status" aria-live="polite">
        <h2 style="color: {status_color}; margin: 0; display: flex; align-items: center; font-size: 1.5rem;">
            <span aria-hidden="true">{status_icon}</span> 
            <span>D√©cision: <strong>{status_text}</strong> ‚Ä¢ Probabilit√© de d√©faut: <strong>{probability:.1%}</strong></span>
        </h2>
    </div>
    """,
    unsafe_allow_html=True
)
# Version accessible pour les lecteurs d'√©cran
st.markdown(f'<div class="visually-hidden">La demande de cr√©dit a √©t√© {status_text}. La probabilit√© de d√©faut calcul√©e est de {probability:.1%}.</div>', unsafe_allow_html=True)

# Organisation en tabs pour les diff√©rentes sections avec attributs ARIA
tab1, tab2, tab3 = st.tabs(["Profil client", "Facteurs d√©cisionnels", "Historique"])

with tab1:
    # Section 1: Informations d√©taill√©es du client
    st.header("Informations personnelles et financi√®res")
    st.markdown('<div class="visually-hidden">Cette section pr√©sente les informations personnelles et financi√®res du client.</div>', unsafe_allow_html=True)
    
    # Colonnes pour les informations
    col1, col2 = st.columns(2)
    
    with col1:
        with st.container(border=True):
            st.subheader("Informations personnelles")
            
            # Cr√©ation d'un tableau pour afficher les informations personnelles
            personal_data = {
                "Caract√©ristique": [
                    "Genre", "√Çge", "√âducation", "Statut familial",
                    "Nombre d'enfants", "Nombre de membres dans le foyer",
                    "Revenu annuel", "Type d'emploi", "Anciennet√© d'emploi"
                ],
                "Valeur": [
                    details['personal_info'].get('gender', ''),
                    f"{details['personal_info'].get('age', '')} ans",
                    details['personal_info'].get('education', ''),
                    details['personal_info'].get('family_status', ''),
                    details['personal_info'].get('children_count', 0),
                    details['personal_info'].get('family_size', 0),
                    f"{details['personal_info'].get('income', 0):,.0f} {UI_CONFIG['currency_symbol']}",
                    details['personal_info'].get('employment_type', ''),
                    f"{details['personal_info'].get('employment_years', 0)} ans"
                ]
            }
            
            # Affichage du tableau avec style
            personal_df = pd.DataFrame(personal_data)
            st.dataframe(
                personal_df,
                column_config={
                    "Caract√©ristique": st.column_config.TextColumn("Caract√©ristique"),
                    "Valeur": st.column_config.TextColumn("Valeur")
                },
                hide_index=True,
                use_container_width=True
            )
            
            # Description pour lecteurs d'√©cran
            personal_summary = ", ".join([f"{row['Caract√©ristique']}: {row['Valeur']}" for _, row in personal_df.iterrows()])
            st.markdown(f'<div class="visually-hidden">Tableau des informations personnelles: {personal_summary}</div>', unsafe_allow_html=True)
    
    with col2:
        with st.container(border=True):
            st.subheader("D√©tails de la demande de cr√©dit")
            
            # Calcul de ratios pertinents
            payment_ratio = details['credit_info'].get('annuity', 0) * 12 / max(details['personal_info'].get('income', 1), 1)
            credit_goods_ratio = details['credit_info'].get('amount', 0) / max(details['credit_info'].get('goods_price', 1), 1)
            
            # Cr√©ation d'un tableau pour les informations de cr√©dit
            credit_data = {
                "Caract√©ristique": [
                    "Montant demand√©", "Dur√©e du cr√©dit", "Mensualit√©",
                    "Valeur du bien", "Type de bien", "Ratio mensualit√©/revenu",
                    "Ratio montant/valeur du bien"
                ],
                "Valeur": [
                    f"{details['credit_info'].get('amount', 0):,.0f} {UI_CONFIG['currency_symbol']}",
                    f"{details['credit_info'].get('credit_term', 0)} mois",
                    f"{details['credit_info'].get('annuity', 0):,.0f} {UI_CONFIG['currency_symbol']}/mois",
                    f"{details['credit_info'].get('goods_price', 0):,.0f} {UI_CONFIG['currency_symbol']}",
                    details['credit_info'].get('name_goods_category', ''),
                    f"{payment_ratio:.1%}",
                    f"{credit_goods_ratio:.2f}"
                ]
            }
            
            # Affichage du tableau de cr√©dit
            credit_df = pd.DataFrame(credit_data)
            st.dataframe(
                credit_df,
                column_config={
                    "Caract√©ristique": st.column_config.TextColumn("Caract√©ristique"),
                    "Valeur": st.column_config.TextColumn("Valeur")
                },
                hide_index=True,
                use_container_width=True
            )
            
            # Description pour lecteurs d'√©cran
            credit_summary = ", ".join([f"{row['Caract√©ristique']}: {row['Valeur']}" for _, row in credit_df.iterrows()])
            st.markdown(f'<div class="visually-hidden">Tableau des informations de cr√©dit: {credit_summary}</div>', unsafe_allow_html=True)
    
    # Section 2: Historique et comportement client
    st.header("Historique du client")
    
    # Colonnes pour historique et comportement
    col_hist1, col_hist2 = st.columns(2)
    
    with col_hist1:
        with st.container(border=True):
            st.subheader("Ant√©c√©dents de cr√©dit")
            
            # Simuler quelques donn√©es d'historique (√† remplacer par des donn√©es r√©elles)
            history_data = {
                "Indicateur": [
                    "Nombre de pr√™ts pr√©c√©dents",
                    "D√©fauts de paiement ant√©rieurs",
                    "Retards de paiement (30+ jours)",
                    "Score bureau de cr√©dit",
                    "Anciennet√© relation (ann√©es)"
                ],
                "Valeur": [
                    details.get('credit_history', {}).get('previous_loans_count', 0),
                    details.get('credit_history', {}).get('previous_defaults', 0),
                    details.get('credit_history', {}).get('late_payments', 0),
                    details.get('credit_history', {}).get('credit_score', 'N/A'),
                    details.get('credit_history', {}).get('years_with_bank', 0)
                ]
            }
            
            # Affichage du tableau d'historique
            history_df = pd.DataFrame(history_data)
            st.dataframe(
                history_df,
                column_config={
                    "Indicateur": st.column_config.TextColumn("Indicateur"),
                    "Valeur": st.column_config.TextColumn("Valeur")
                },
                hide_index=True,
                use_container_width=True
            )
            
            # Description pour lecteurs d'√©cran
            history_summary = ", ".join([f"{row['Indicateur']}: {row['Valeur']}" for _, row in history_df.iterrows()])
            st.markdown(f'<div class="visually-hidden">Tableau des ant√©c√©dents de cr√©dit: {history_summary}</div>', unsafe_allow_html=True)
    
    with col_hist2:
        with st.container(border=True):
            st.subheader("Documents et v√©rifications")
            
            # Simuler les donn√©es de v√©rification (√† remplacer par des donn√©es r√©elles)
            verification_data = {
                "Document/V√©rification": [
                    "Pi√®ce d'identit√©",
                    "Justificatif de revenus",
                    "Justificatif de domicile",
                    "V√©rification d'emploi",
                    "V√©rification t√©l√©phonique"
                ],
                "Statut": [
                    "‚úÖ V√©rifi√©",  # Utiliser √† la fois ic√¥ne et texte
                    "‚úÖ V√©rifi√©",
                    "‚úÖ V√©rifi√©",
                    "‚ö†Ô∏è En attente",
                    "‚ùå Non effectu√©e"
                ]
            }
            
            # Affichage du tableau de v√©rifications
            verification_df = pd.DataFrame(verification_data)
            st.dataframe(
                verification_df,
                column_config={
                    "Document/V√©rification": st.column_config.TextColumn("Document/V√©rification"),
                    "Statut": st.column_config.TextColumn("Statut")
                },
                hide_index=True,
                use_container_width=True
            )
            
            # Description pour lecteurs d'√©cran
            verification_summary = ", ".join([f"{row['Document/V√©rification']}: {row['Statut']}" for _, row in verification_df.iterrows()])
            st.markdown(f'<div class="visually-hidden">Tableau des documents et v√©rifications: {verification_summary}</div>', unsafe_allow_html=True)

with tab2:
    # Section 3: Analyse des facteurs d'importance
    st.header("Facteurs influen√ßant la d√©cision")
    st.markdown('<div class="visually-hidden">Cette section analyse les facteurs qui ont le plus d\'impact sur la d√©cision de cr√©dit.</div>', unsafe_allow_html=True)
    
    # V√©rifier si des valeurs d'importance sont disponibles
    if feature_importance:
        # Trier les features par importance absolue
        sorted_features = sorted(
            feature_importance.items(),
            key=lambda x: abs(x[1]),
            reverse=True
        )
        
        # Limiter aux features les plus importantes
        top_features = sorted_features[:UI_CONFIG["max_features_display"]]
        
        # Pr√©parer les donn√©es pour le graphique
        feature_names = []
        feature_values = []
        colors = []
        
        for feature, value in top_features:
            # Obtenir un nom convivial pour la feature √† partir des descriptions
            display_name = FEATURE_DESCRIPTIONS.get(feature, feature)
            feature_names.append(display_name)
            feature_values.append(value)
            
            # Couleur bas√©e sur l'impact (positif ou n√©gatif)
            colors.append(
                COLORBLIND_FRIENDLY_PALETTE["positive"] if value < 0 else
                COLORBLIND_FRIENDLY_PALETTE["negative"]
            )
        
        # Cr√©er le graphique d'importance des features avec accessibilit√© am√©lior√©e
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=feature_values,
            y=feature_names,
            orientation='h',
            marker_color=colors,
            text=[f"{v:.3f}" for v in feature_values],
            textposition='auto',
            # Am√©liorer info-bulles pour l'accessibilit√©
            hovertemplate='<b>%{y}</b><br>Impact: %{x:.3f}<extra></extra>'
        ))
        
        fig.update_layout(
            title="Impact des caract√©ristiques sur la d√©cision",
            xaxis_title="Impact sur la probabilit√© de d√©faut (valeurs SHAP)",
            height=500,
            margin=dict(l=20, r=20, t=50, b=20),
            xaxis=dict(
                zeroline=True,
                zerolinecolor='black',
                zerolinewidth=1
            ),
            font=dict(size=14),  # Augmenter taille de police pour lisibilit√©
            # Am√©liorer info-bulles
            hoverlabel=dict(
                bgcolor="white",
                font_size=14,
                font_family="Arial"
            )
        )
        
        # Afficher le graphique
        st.plotly_chart(fig, use_container_width=True)
        
        # Description textuelle pour les lecteurs d'√©cran
        feature_impact_description = []
        for feature, value in top_features:
            display_name = FEATURE_DESCRIPTIONS.get(feature, feature)
            impact_type = "favorable (r√©duisant le risque)" if value < 0 else "d√©favorable (augmentant le risque)"
            feature_impact_description.append(f"{display_name} a un impact {impact_type} de {abs(value):.3f}")
        
        features_text = ". ".join(feature_impact_description)
        st.markdown(f'<div class="visually-hidden" aria-hidden="false">Graphique montrant l\'impact des caract√©ristiques sur la d√©cision de cr√©dit. {features_text}</div>', unsafe_allow_html=True)
        
        # L√©gende explicative avec contraste am√©lior√©
        st.markdown("""
        <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.5rem; border: 1px solid #dee2e6;">
            <h4 style="margin-top: 0;">Comment interpr√©ter ce graphique?</h4>
            <ul style="margin-bottom: 0;">
                <li><span style="color: #018571; font-weight: bold;">Les barres vertes</span> repr√©sentent des facteurs qui <strong>r√©duisent</strong> la probabilit√© de d√©faut (favorable au client).</li>
                <li><span style="color: #a6611a; font-weight: bold;">Les barres rouges</span> repr√©sentent des facteurs qui <strong>augmentent</strong> la probabilit√© de d√©faut (d√©favorable au client).</li>
                <li>Plus la barre est longue, plus l'impact du facteur est important.</li>
                <li>Les valeurs repr√©sentent la contribution de chaque caract√©ristique √† la probabilit√© finale.</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
        # Table d'explication d√©taill√©e des facteurs
        st.subheader("Explication d√©taill√©e des facteurs principaux")
        
        explanations = []
        
        for feature, value in top_features:
            display_name = FEATURE_DESCRIPTIONS.get(feature, feature)
            direction = "favorable" if value < 0 else "d√©favorable"
            impact = "r√©duit" if value < 0 else "augmente"
            magnitude = "fortement" if abs(value) > 0.1 else "mod√©r√©ment" if abs(value) > 0.05 else "l√©g√®rement"
            
            # Obtenir la valeur r√©elle de la feature
            feature_value = None
            if feature in details.get('features', {}):
                feature_value = details['features'][feature]
            
            # Ajouter des ic√¥nes pour l'impact visuel (plus accessibilit√©)
            impact_icon = "‚úÖ " if value < 0 else "‚ùå "
            impact_text = f"{impact_icon}{abs(value):.3f}"
            
            if feature_value is not None:
                explanation = f"La valeur de **{display_name}** est **{feature_value}**, ce qui {impact} {magnitude} le risque de d√©faut. Ce facteur est {direction} √† la demande."
            else:
                explanation = f"Le facteur **{display_name}** {impact} {magnitude} le risque de d√©faut. Ce facteur est {direction} √† la demande."
            
            explanations.append({
                "Facteur": display_name,
                "Impact": impact_text,
                "Explication": explanation
            })
        
        # Cr√©er un DataFrame pour l'affichage
        explanations_df = pd.DataFrame(explanations)
        
        # Utiliser st.dataframe pour un affichage format√©
        st.dataframe(
            explanations_df,
            column_config={
                "Facteur": st.column_config.TextColumn("Facteur"),
                "Impact": st.column_config.TextColumn("Impact"),
                "Explication": st.column_config.TextColumn("Explication", width="large")
            },
            hide_index=True,
            use_container_width=True
        )
        
        # R√©sum√© textuel pour les lecteurs d'√©cran
        explanations_summary = ". ".join([f"{row['Facteur']}: {row['Explication']}" for _, row in explanations_df.iterrows()])
        st.markdown(f'<div class="visually-hidden">Tableau d\'explications des facteurs principaux: {explanations_summary}</div>', unsafe_allow_html=True)
        
    else:
        # Message si les valeurs SHAP ne sont pas disponibles
        st.markdown('<div class="alert-warning" style="padding: 1rem; border-radius: 0.5rem;">', unsafe_allow_html=True)
        st.info("""
        Les valeurs d'importance des caract√©ristiques (SHAP) ne sont pas disponibles pour ce client.
        
        Motifs possibles:
        - L'API de calcul SHAP est temporairement indisponible
        - Le mod√®le n'a pas pu calculer les valeurs pour ce client sp√©cifique
        - Le client poss√®de des caract√©ristiques atypiques
        
        Vous pouvez toujours analyser les autres informations du profil client.
        """)
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Section d'analyse comparative des caract√©ristiques
    st.header("Analyse comparative des caract√©ristiques")
    
    # S√©lection des caract√©ristiques √† visualiser avec label plus descriptif
    selected_features = st.multiselect(
        label="S√©lectionner des caract√©ristiques √† comparer aux seuils:",
        options=list(details.get('features', {}).keys()),
        default=list(details.get('features', {}).keys())[:3],
        help="S√©lectionnez une ou plusieurs caract√©ristiques pour voir comment les valeurs du client se comparent aux seuils favorable et d√©favorable."
    )
    
    if selected_features:
        # Pr√©paration des donn√©es
        feature_data = []
        
        for feature in selected_features:
            if feature in details.get('features', {}):
                # Simuler des seuils (√† remplacer par des donn√©es r√©elles)
                good_threshold = np.random.uniform(0.2, 0.8) * details['features'][feature]
                bad_threshold = np.random.uniform(1.2, 1.8) * details['features'][feature]
                
                feature_data.append({
                    "Caract√©ristique": FEATURE_DESCRIPTIONS.get(feature, feature),
                    "Valeur client": details['features'][feature],
                    "Seuil favorable": good_threshold,
                    "Seuil d√©favorable": bad_threshold
                })
        
        # Cr√©ation du graphique avec am√©liorations d'accessibilit√©
        fig = go.Figure()
        
        for data in feature_data:
            fig.add_trace(go.Scatter(
                x=[data["Caract√©ristique"]],
                y=[data["Valeur client"]],
                mode='markers',
                name=data["Caract√©ristique"],
                marker=dict(size=12, color=COLORBLIND_FRIENDLY_PALETTE["primary"]),
                # Am√©liorer info-bulles
                hovertemplate='<b>%{x}</b><br>Valeur client: %{y:.2f}<extra></extra>'
            ))
            
            fig.add_shape(
                type="line",
                x0=data["Caract√©ristique"],
                y0=data["Seuil favorable"],
                x1=data["Caract√©ristique"],
                y1=data["Seuil d√©favorable"],
                line=dict(
                    color="gray",
                    width=2,
                )
            )
            
            # Marquer le seuil favorable
            fig.add_trace(go.Scatter(
                x=[data["Caract√©ristique"]],
                y=[data["Seuil favorable"]],
                mode='markers',
                marker=dict(
                    symbol="triangle-up",
                    size=10,
                    color=COLORBLIND_FRIENDLY_PALETTE["positive"]
                ),
                name="Seuil favorable",
                showlegend=False,
                # Am√©liorer info-bulles
                hovertemplate='<b>%{x}</b><br>Seuil favorable: %{y:.2f}<extra></extra>'
            ))
            
            # Marquer le seuil d√©favorable
            fig.add_trace(go.Scatter(
                x=[data["Caract√©ristique"]],
                y=[data["Seuil d√©favorable"]],
                mode='markers',
                marker=dict(
                    symbol="triangle-down",
                    size=10,
                    color=COLORBLIND_FRIENDLY_PALETTE["negative"]
                ),
                name="Seuil d√©favorable",
                showlegend=False,
                # Am√©liorer info-bulles
                hovertemplate='<b>%{x}</b><br>Seuil d√©favorable: %{y:.2f}<extra></extra>'
            ))
        
        fig.update_layout(
            title="Positionnement du client par rapport aux seuils",
            height=400,
            margin=dict(l=20, r=20, t=50, b=20),
            showlegend=False,
            font=dict(size=14)  # Am√©lioration de la taille des polices
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Description textuelle pour les lecteurs d'√©cran
        comparison_description = []
        for data in feature_data:
            if data["Valeur client"] < data["Seuil favorable"]:
                position = "en dessous du seuil favorable"
                status = "tr√®s favorable"
            elif data["Valeur client"] > data["Seuil d√©favorable"]:
                position = "au-dessus du seuil d√©favorable"
                status = "d√©favorable"
            else:
                position = "entre les seuils favorable et d√©favorable"
                status = "acceptable"
            
            comparison_description.append(f"Pour {data['Caract√©ristique']}, la valeur du client ({data['Valeur client']:.2f}) est {position}, ce qui est {status}")
        
        comparison_text = ". ".join(comparison_description)
        st.markdown(f'<div class="visually-hidden" aria-hidden="false">Graphique montrant le positionnement du client par rapport aux seuils pour les caract√©ristiques s√©lectionn√©es: {", ".join([f["Caract√©ristique"] for f in feature_data])}. {comparison_text}.</div>', unsafe_allow_html=True)
        
        # Tableau des valeurs avec formatage am√©lior√©
        st.dataframe(
            pd.DataFrame(feature_data),
            column_config={
                "Caract√©ristique": st.column_config.TextColumn("Caract√©ristique"),
                "Valeur client": st.column_config.NumberColumn("Valeur client", format="%.2f"),
                "Seuil favorable": st.column_config.NumberColumn("Seuil favorable", format="%.2f"),
                "Seuil d√©favorable": st.column_config.NumberColumn("Seuil d√©favorable", format="%.2f")
            },
            hide_index=True,
            use_container_width=True
        )
        
        # R√©sum√© textuel pour les lecteurs d'√©cran
        feature_data_summary = ". ".join([f"{d['Caract√©ristique']}: valeur client {d['Valeur client']:.2f}, seuil favorable {d['Seuil favorable']:.2f}, seuil d√©favorable {d['Seuil d√©favorable']:.2f}" for d in feature_data])
        st.markdown(f'<div class="visually-hidden">Tableau des caract√©ristiques s√©lectionn√©es: {feature_data_summary}</div>', unsafe_allow_html=True)
        
    else:
        st.info("Veuillez s√©lectionner au moins une caract√©ristique pour l'analyse comparative.")

with tab3:
    # Section 4: Historique des d√©cisions
    st.header("Historique des d√©cisions pour ce client")
    st.markdown('<div class="visually-hidden">Cette section pr√©sente l\'historique des demandes de cr√©dit pr√©c√©dentes du client.</div>', unsafe_allow_html=True)
    
    # Simuler un historique (√† remplacer par des donn√©es r√©elles)
    decision_history = [
        {"Date": "2025-09-15", "Score": 0.559, "D√©cision": "REFUS√â", "Montant": 360000, "Dur√©e": 19},
        {"Date": "2024-11-22", "Score": 0.48, "D√©cision": "ACCEPT√â", "Montant": 280000, "Dur√©e": 24},
        {"Date": "2023-05-07", "Score": 0.52, "D√©cision": "REFUS√â", "Montant": 400000, "Dur√©e": 36}
    ]
    
    # V√©rifier s'il y a un historique √† afficher
    if decision_history:
        # Cr√©er un DataFrame pour l'historique
        history_df = pd.DataFrame(decision_history)
        
        # Am√©liorer les d√©cisions pour l'accessibilit√© (ajouter des ic√¥nes)
        history_df["D√©cision"] = history_df["D√©cision"].apply(
            lambda x: f"‚úÖ {x}" if x == "ACCEPT√â" else f"‚ùå {x}"
        )
        
        # Afficher le tableau avec style
        st.dataframe(
            history_df,
            column_config={
                "Date": st.column_config.DateColumn("Date"),
                "Score": st.column_config.NumberColumn("Score de risque", format="%.3f"),
                "D√©cision": st.column_config.TextColumn("D√©cision"),
                "Montant": st.column_config.NumberColumn(f"Montant ({UI_CONFIG['currency_symbol']})", format="%d"),
                "Dur√©e": st.column_config.NumberColumn("Dur√©e (mois)")
            },
            hide_index=True,
            use_container_width=True
        )
        
        # R√©sum√© textuel pour les lecteurs d'√©cran
        history_summary = ". ".join([f"Date: {row['Date']}, D√©cision: {row['D√©cision']}, Score: {row['Score']:.3f}, Montant: {row['Montant']} {UI_CONFIG['currency_symbol']}, Dur√©e: {row['Dur√©e']} mois" for _, row in history_df.iterrows()])
        st.markdown(f'<div class="visually-hidden">Tableau des d√©cisions historiques: {history_summary}</div>', unsafe_allow_html=True)
        
        # Graphique d'√©volution des scores avec am√©liorations d'accessibilit√©
        fig = px.line(
            history_df,
            x="Date",
            y="Score",
            markers=True,
            title="√âvolution du score de risque au fil du temps",
            color_discrete_sequence=[COLORBLIND_FRIENDLY_PALETTE["primary"]]
        )
        
        # Ajouter la ligne de seuil
        fig.add_hline(
            y=DEFAULT_THRESHOLD,
            line_dash="dash",
            line_color=COLORBLIND_FRIENDLY_PALETTE["threshold"],
            annotation_text=f"Seuil ({DEFAULT_THRESHOLD:.2f})",
            annotation_position="bottom right"
        )
        
        fig.update_layout(
            xaxis_title="Date",
            yaxis_title="Score de risque",
            height=400,
            margin=dict(l=20, r=20, t=50, b=20),
            font=dict(size=14),  # Am√©lioration de la taille des polices
            # Am√©liorer info-bulles
            hoverlabel=dict(
                bgcolor="white",
                font_size=14,
                font_family="Arial"
            )
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Description textuelle du graphique pour les lecteurs d'√©cran
        score_trend = "augmente" if history_df["Score"].iloc[-1] > history_df["Score"].iloc[0] else "diminue"
        st.markdown(f'<div class="visually-hidden" aria-hidden="false">Graphique d\'√©volution du score de risque au fil du temps. La tendance g√©n√©rale du score {score_trend}. Le seuil de d√©cision est fix√© √† {DEFAULT_THRESHOLD:.2f}. Les scores inf√©rieurs au seuil correspondent √† des d√©cisions favorables.</div>', unsafe_allow_html=True)
        
    else:
        st.info("Aucun historique de d√©cision disponible pour ce client.")

# Notes et actions du charg√© de relation
st.header("Notes et actions")

col_notes1, col_notes2 = st.columns([2, 1])

with col_notes1:
    # Syst√®me de notes (sauvegard√© dans la session)
    if "detailed_notes" not in st.session_state:
        st.session_state.detailed_notes = {}
    
    current_notes = st.session_state.detailed_notes.get(client_id, "")
    
    # Am√©liorer l'accessibilit√© du champ de texte
    new_notes = st.text_area(
        label="Notes de suivi d√©taill√©es",
        value=current_notes,
        height=150,
        placeholder="Saisissez ici vos observations, √©changes avec le client, ou actions de suivi...",
        help="Ces notes sont sauvegard√©es automatiquement dans votre session",
        key="detailed_notes_field"
    )
    
    if new_notes != current_notes:
        st.session_state.detailed_notes[client_id] = new_notes
        st.markdown('<div class="alert-success" style="padding: 0.75rem; border-radius: 0.5rem; margin-top: 1rem;">', unsafe_allow_html=True)
        st.success("Notes enregistr√©es")
        st.markdown('</div>', unsafe_allow_html=True)
        # Pour les lecteurs d'√©cran
        st.markdown('<div class="visually-hidden" aria-live="polite">Vos notes ont √©t√© enregistr√©es avec succ√®s.</div>', unsafe_allow_html=True)

with col_notes2:
    # Actions possibles
    with st.container(border=True):
        st.subheader("Actions rapides")
        
        # Rendre les boutons plus accessibles
        if st.button("üìß Envoyer un r√©capitulatif", 
                     help="Envoie un r√©sum√© de cette analyse au client par email",
                     use_container_width=True):
            st.info("Fonctionnalit√© d'envoi d'email √† impl√©menter.")
            st.markdown('<div class="visually-hidden" aria-live="polite">La fonctionnalit√© d\'envoi de r√©capitulatif par email sera impl√©ment√©e prochainement.</div>', unsafe_allow_html=True)
            
        if decision == "REFUS√â" and st.button("üìù Demander une r√©vision", 
                                              help="Demande une nouvelle √©valuation du dossier",
                                              use_container_width=True):
            st.info("Redirection vers le formulaire de r√©vision.")
            st.markdown('<div class="visually-hidden" aria-live="polite">Vous serez redirig√© vers le formulaire de r√©vision.</div>', unsafe_allow_html=True)
            
        if st.button("üîô Retour √† l'accueil", 
                     help="Retourner √† la page d'accueil",
                     use_container_width=True):
            st.switch_page("Home.py")

# Footer avec informations de version (am√©lior√© pour l'accessibilit√©)
st.markdown("""
<hr aria-hidden="true">
<div style="text-align: center; color: #333333; background-color: #f8f9fa; padding: 0.75rem; border-radius: 0.5rem; margin-top: 1rem;">
    <div>
        <strong>Profil client d√©taill√©</strong> | Derni√®re mise √† jour: 2025-10-17 07:38:53
    </div>
    <div>
        <span>Montants exprim√©s en roubles (‚ÇΩ)</span> | 
        <span>Contact support: <a href="tel:+XXXXXXXXXX" style="color: #0066cc;">poste 4242</a></span>
    </div>
</div>
""", unsafe_allow_html=True)