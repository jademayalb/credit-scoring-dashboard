import streamlit as st
import requests
import logging
from config import API_URL_BASE, CLIENT_DETAILS_ENDPOINT, PREDICT_ENDPOINT, SHAP_ENDPOINT

# Configuration basique de la page
st.set_page_config(page_title="D√©bogage Client", page_icon="üîç")

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

st.title("D√©bogage de la page Profil Client")

# V√©rification des variables de session
st.subheader("1. √âtat de la session")
st.write("Contenu de session_state:", st.session_state)

if "client_id" in st.session_state:
    client_id = st.session_state.client_id
    st.success(f"ID client trouv√© dans la session: {client_id}")
else:
    client_id = st.number_input("Entrez un ID client pour tester:", min_value=100000, max_value=999999, value=100001)
    if st.button("Enregistrer dans la session"):
        st.session_state.client_id = client_id
        st.experimental_rerun()

# Test des appels API
st.subheader("2. Test des appels API")

# Test de connectivit√© API
st.write("Test de connectivit√© √† l'API de base:")
try:
    response = requests.get(f"{API_URL_BASE}/health", timeout=5)
    st.write(f"- Statut: {response.status_code}")
    st.write(f"- R√©ponse: {response.text[:200]}")
    if response.status_code == 200:
        st.success("‚úÖ API de base accessible")
    else:
        st.error("‚ùå Probl√®me d'acc√®s √† l'API de base")
except Exception as e:
    st.error(f"‚ùå Erreur de connexion √† l'API: {str(e)}")

# Test des endpoints sp√©cifiques
endpoints = {
    "Pr√©diction": f"{PREDICT_ENDPOINT}{client_id}",
    "D√©tails client": f"{CLIENT_DETAILS_ENDPOINT}{client_id}/details",
    "Valeurs SHAP": f"{SHAP_ENDPOINT}{client_id}"
}

for name, url in endpoints.items():
    st.write(f"Test de l'endpoint {name}:")
    st.code(url)  # Affiche l'URL compl√®te pour v√©rification
    
    try:
        response = requests.get(url, timeout=10)
        st.write(f"- Statut: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            st.success(f"‚úÖ Endpoint {name} accessible")
            with st.expander("Voir la r√©ponse"):
                st.json(data)
        else:
            st.error(f"‚ùå Probl√®me d'acc√®s √† l'endpoint {name}")
            st.write(f"- Erreur: {response.text[:200]}")
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'appel √† {name}: {str(e)}")

# Affichage des configurations
st.subheader("3. V√©rification des configurations")
st.write("URL de base de l'API:", API_URL_BASE)
st.write("Endpoint de pr√©diction:", PREDICT_ENDPOINT)
st.write("Endpoint des d√©tails client:", CLIENT_DETAILS_ENDPOINT)
st.write("Endpoint des valeurs SHAP:", SHAP_ENDPOINT)

# Instructions
st.info("""
Ce d√©bogage permet d'identifier o√π se situe le probl√®me:
1. Si les URLs affich√©es ne sont pas correctes, corrigez le fichier config.py
2. Si l'API n'est pas accessible, v√©rifiez que le serveur API est bien d√©marr√©
3. Si les appels API √©chouent, v√©rifiez les logs du serveur API pour plus de d√©tails
""")
